// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Project3.Data;

#nullable disable

namespace Project3.Migrations
{
    [DbContext(typeof(MyDbContext))]
    partial class MyDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Project3.Models.Device", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeviceId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeviceName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeviceType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("Project3.Models.Friend", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RecieveId")
                        .HasColumnType("int");

                    b.Property<int>("SendId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Friends");
                });

            modelBuilder.Entity("Project3.Models.Hobbie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("detai")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Hobbies");
                });

            modelBuilder.Entity("Project3.Models.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ReceiverId")
                        .HasColumnType("int");

                    b.Property<int>("SenderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SenderId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("Project3.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RoleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 12, 11, 17, 2, 34, 642, DateTimeKind.Local).AddTicks(694),
                            RoleName = "user",
                            UpdatedDate = new DateTime(2023, 12, 11, 17, 2, 34, 642, DateTimeKind.Local).AddTicks(679)
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2023, 12, 11, 17, 2, 34, 642, DateTimeKind.Local).AddTicks(705),
                            RoleName = "writer",
                            UpdatedDate = new DateTime(2023, 12, 11, 17, 2, 34, 642, DateTimeKind.Local).AddTicks(705)
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2023, 12, 11, 17, 2, 34, 642, DateTimeKind.Local).AddTicks(713),
                            RoleName = "admin",
                            UpdatedDate = new DateTime(2023, 12, 11, 17, 2, 34, 642, DateTimeKind.Local).AddTicks(712)
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2023, 12, 11, 17, 2, 34, 642, DateTimeKind.Local).AddTicks(721),
                            RoleName = "manager",
                            UpdatedDate = new DateTime(2023, 12, 11, 17, 2, 34, 642, DateTimeKind.Local).AddTicks(715)
                        });
                });

            modelBuilder.Entity("Project3.Models.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("Project3.Models.RoomMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsMember")
                        .HasColumnType("bit");

                    b.Property<int?>("MemberId")
                        .HasColumnType("int");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RoomId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.HasIndex("RoomId");

                    b.ToTable("RoomMembers");
                });

            modelBuilder.Entity("Project3.Models.RoomMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("RoomId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.HasIndex("UserId");

                    b.ToTable("RoomMessages");
                });

            modelBuilder.Entity("Project3.Models.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("Project3.Models.ServiceContent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("image")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.ToTable("ServiceContents");
                });

            modelBuilder.Entity("Project3.Models.ServicePrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.ToTable("ServicePrice");
                });

            modelBuilder.Entity("Project3.Models.ServiceRegistered", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Service_PriceId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Service_PriceId");

                    b.HasIndex("UserId");

                    b.ToTable("ServiceRegistereds");
                });

            modelBuilder.Entity("Project3.Models.TypeHobbie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("TypeHobbies");
                });

            modelBuilder.Entity("Project3.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Dob")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("bit");

                    b.Property<bool>("NeddLogout")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResetToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ResetTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Verified")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Avatar = "default.jpg",
                            CreatedDate = new DateTime(2023, 12, 11, 17, 2, 34, 643, DateTimeKind.Local).AddTicks(5034),
                            Dob = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "vainhoo@gmail.com",
                            IsBlocked = false,
                            NeddLogout = false,
                            Password = "$2a$11$bIXdrfHXtXvcoBGadqizFOCEVWOVuIWv291xV5Wfcu6qUSZxmaEb.",
                            Phone = "+84234456678",
                            UpdatedDate = new DateTime(2023, 12, 11, 17, 2, 34, 643, DateTimeKind.Local).AddTicks(5027),
                            UserName = "xhaka",
                            Verified = true
                        },
                        new
                        {
                            Id = 2,
                            Avatar = "default.jpg",
                            CreatedDate = new DateTime(2023, 12, 11, 17, 2, 34, 883, DateTimeKind.Local).AddTicks(8013),
                            Dob = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "vainhoo@gmail.com",
                            IsBlocked = false,
                            NeddLogout = false,
                            Password = "$2a$11$Aj/TdD8NyPfQEBPA.tWtXOVMu4gPzFREil205twnwrhIF2UWdunT6",
                            Phone = "+8477885566",
                            UpdatedDate = new DateTime(2023, 12, 11, 17, 2, 34, 883, DateTimeKind.Local).AddTicks(7981),
                            UserName = "saka",
                            Verified = true
                        },
                        new
                        {
                            Id = 3,
                            Avatar = "default.jpg",
                            CreatedDate = new DateTime(2023, 12, 11, 17, 2, 35, 119, DateTimeKind.Local).AddTicks(7301),
                            Dob = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "vainhoo@gmail.com",
                            IsBlocked = false,
                            NeddLogout = false,
                            Password = "$2a$11$Zl/LyrJMkcrzhjGyxMBrCu07lrUDcekIKv7U8cwst5p.JBlIsql/6",
                            Phone = "+84987765543",
                            UpdatedDate = new DateTime(2023, 12, 11, 17, 2, 35, 119, DateTimeKind.Local).AddTicks(7288),
                            UserName = "rose",
                            Verified = true
                        },
                        new
                        {
                            Id = 4,
                            Avatar = "default.jpg",
                            CreatedDate = new DateTime(2023, 12, 11, 17, 2, 35, 362, DateTimeKind.Local).AddTicks(5309),
                            Dob = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "vainhoo@gmail.com",
                            IsBlocked = false,
                            NeddLogout = false,
                            Password = "$2a$11$AEESQh4DgkWl/p9UjW8/vOjxNAea8UiT3wJymqEL1Ovit.GE7kcVq",
                            Phone = "+8422665544",
                            UpdatedDate = new DateTime(2023, 12, 11, 17, 2, 35, 362, DateTimeKind.Local).AddTicks(5289),
                            UserName = "atetar",
                            Verified = true
                        },
                        new
                        {
                            Id = 5,
                            Avatar = "default.jpg",
                            CreatedDate = new DateTime(2023, 12, 11, 17, 2, 35, 603, DateTimeKind.Local).AddTicks(6456),
                            Dob = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "vainhoo@gmail.com",
                            IsBlocked = false,
                            NeddLogout = false,
                            Password = "$2a$11$CHySSpJd/OD52o87dZhsqeeCa2EkGDYceaXbhuxrAeUxovlQXbmuS",
                            Phone = "+84987865454",
                            UpdatedDate = new DateTime(2023, 12, 11, 17, 2, 35, 603, DateTimeKind.Local).AddTicks(6449),
                            UserName = "enketia",
                            Verified = true
                        });
                });

            modelBuilder.Entity("Project3.Models.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 12, 11, 17, 2, 35, 859, DateTimeKind.Local).AddTicks(8320),
                            RoleId = 1,
                            UpdatedDate = new DateTime(2023, 12, 11, 17, 2, 35, 859, DateTimeKind.Local).AddTicks(8309),
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2023, 12, 11, 17, 2, 35, 859, DateTimeKind.Local).AddTicks(8337),
                            RoleId = 1,
                            UpdatedDate = new DateTime(2023, 12, 11, 17, 2, 35, 859, DateTimeKind.Local).AddTicks(8337),
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2023, 12, 11, 17, 2, 35, 859, DateTimeKind.Local).AddTicks(8339),
                            RoleId = 1,
                            UpdatedDate = new DateTime(2023, 12, 11, 17, 2, 35, 859, DateTimeKind.Local).AddTicks(8339),
                            UserId = 3
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2023, 12, 11, 17, 2, 35, 859, DateTimeKind.Local).AddTicks(8341),
                            RoleId = 1,
                            UpdatedDate = new DateTime(2023, 12, 11, 17, 2, 35, 859, DateTimeKind.Local).AddTicks(8340),
                            UserId = 4
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2023, 12, 11, 17, 2, 35, 859, DateTimeKind.Local).AddTicks(8342),
                            RoleId = 1,
                            UpdatedDate = new DateTime(2023, 12, 11, 17, 2, 35, 859, DateTimeKind.Local).AddTicks(8342),
                            UserId = 5
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2023, 12, 11, 17, 2, 35, 859, DateTimeKind.Local).AddTicks(8346),
                            RoleId = 4,
                            UpdatedDate = new DateTime(2023, 12, 11, 17, 2, 35, 859, DateTimeKind.Local).AddTicks(8345),
                            UserId = 2
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(2023, 12, 11, 17, 2, 35, 859, DateTimeKind.Local).AddTicks(8347),
                            RoleId = 3,
                            UpdatedDate = new DateTime(2023, 12, 11, 17, 2, 35, 859, DateTimeKind.Local).AddTicks(8347),
                            UserId = 3
                        });
                });

            modelBuilder.Entity("Project3.Models.Verified", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsLife")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("verifieds");
                });

            modelBuilder.Entity("Project3.Models.Device", b =>
                {
                    b.HasOne("Project3.Models.User", null)
                        .WithMany("Devices")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Project3.Models.Friend", b =>
                {
                    b.HasOne("Project3.Models.User", null)
                        .WithMany("Friends")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Project3.Models.Hobbie", b =>
                {
                    b.HasOne("Project3.Models.TypeHobbie", "TypeHobbie")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project3.Models.User", null)
                        .WithMany("Hobbies")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TypeHobbie");
                });

            modelBuilder.Entity("Project3.Models.Message", b =>
                {
                    b.HasOne("Project3.Models.User", null)
                        .WithMany("Messages")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Project3.Models.RoomMember", b =>
                {
                    b.HasOne("Project3.Models.User", "user")
                        .WithMany()
                        .HasForeignKey("MemberId");

                    b.HasOne("Project3.Models.Room", null)
                        .WithMany("members")
                        .HasForeignKey("RoomId");

                    b.Navigation("user");
                });

            modelBuilder.Entity("Project3.Models.RoomMessage", b =>
                {
                    b.HasOne("Project3.Models.Room", null)
                        .WithMany("Messages")
                        .HasForeignKey("RoomId");

                    b.HasOne("Project3.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Project3.Models.ServiceContent", b =>
                {
                    b.HasOne("Project3.Models.Service", "Service")
                        .WithMany("ServiceContents")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Project3.Models.ServicePrice", b =>
                {
                    b.HasOne("Project3.Models.Service", "Service")
                        .WithMany("ServicePrices")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Project3.Models.ServiceRegistered", b =>
                {
                    b.HasOne("Project3.Models.ServicePrice", "ServicePrice")
                        .WithMany()
                        .HasForeignKey("Service_PriceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project3.Models.User", "User")
                        .WithMany("Registered")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServicePrice");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Project3.Models.UserRole", b =>
                {
                    b.HasOne("Project3.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project3.Models.User", null)
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Project3.Models.Room", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("members");
                });

            modelBuilder.Entity("Project3.Models.Service", b =>
                {
                    b.Navigation("ServiceContents");

                    b.Navigation("ServicePrices");
                });

            modelBuilder.Entity("Project3.Models.User", b =>
                {
                    b.Navigation("Devices");

                    b.Navigation("Friends");

                    b.Navigation("Hobbies");

                    b.Navigation("Messages");

                    b.Navigation("Registered");

                    b.Navigation("Roles");
                });
#pragma warning restore 612, 618
        }
    }
}
